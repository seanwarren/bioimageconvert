/*****************************************************************************
  OME XML file format (Open Microscopy Environment)
  UCSB/BioITR property
  Copyright (c) 2005 by Dmitry V. Fedorov <www.dimin.net> <dima@dimin.net>

  IMPLEMENTATION
  
  Author: Dima V. Fedorov <mailto:dima@dimin.net> <http://www.dimin.net/>

  History:
    11/21/2005 15:43 - First creation
            
  Ver : 1
*****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "bim_ome_format.h"
#include "bim_ome_format_io.cpp"

using namespace bim;

//****************************************************************************
// MISC
//****************************************************************************

OmeParams::OmeParams() {
    i = initImageInfo(); 
}

OmeParams::~OmeParams() {
  
}

//****************************************************************************
// INTERNAL STRUCTURES
//****************************************************************************

void omeGetImageInfo( FormatHandle *fmtHndl ) {
  if (fmtHndl == NULL) return;
  if (fmtHndl->internalParams == NULL) return;
  OmeParams *omePar = (OmeParams *) fmtHndl->internalParams;
  ImageInfo *info = &omePar->i; 
  *info = initImageInfo();

/*
  if (fmtHndl->stream == NULL) return;
  if (xseek(fmtHndl, 0, SEEK_SET) != 0) return;
  if ( xread( fmtHndl, &ibwPar->bh, 1, sizeof(BinHeader5) ) != sizeof(BinHeader5)) return;
*/  


  // set image parameters
  info->width   = 1;
  info->height  = 1;
  info->samples = 1;
  info->number_pages = 1;
  info->imageMode = IM_GRAYSCALE;
  
  // by now we'll normalize all data
  info->depth     = 8;
  info->pixelType = FMT_UNSIGNED;


  //-------------------------------------------------
  // init palette
  //-------------------------------------------------
  info->lut.count = 0;
  for (int i=0; i<256; i++) info->lut.rgba[i] = xRGB(i, i, i);

}

void omeWriteOmeHeader( FormatHandle *fmtHndl )
{
  if (fmtHndl == NULL) return;
  if (fmtHndl->internalParams == NULL) return;
  if (fmtHndl->stream == NULL) return;

  std::string str;

  // write header
  str="";
  str += "<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n";
  str += "\n"; 
  str += "<!--\n";
  str += "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n";
  str += "# Generated by:\n";
  str += "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n";
  str += "-->\n";
  str += "\n";
  str += "<OME xmlns = \"http://www.openmicroscopy.org/XMLschemas/OME/FC/ome.xsd\"\n";
  str += "     xmlns:STD = \"http://www.openmicroscopy.org/XMLschemas/STD/RC2/STD.xsd\"\n";
  str += "     xmlns:Bin = \"http://www.openmicroscopy.org/XMLschemas/BinaryFile/RC1/BinaryFile.xsd\"\n";
  str += "     xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n";
  str += "     xsi:schemaLocation = \"http://www.openmicroscopy.org/XMLschemas/OME/FC/ome.xsd http://www.openmicroscopy.org/XMLschemas/OME/FC/ome.xsd http://www.openmicroscopy.org/XMLschemas/STD/RC2/STD.xsd http://www.openmicroscopy.org/XMLschemas/STD/RC2/STD.xsd\">\n";
  str += "\n";
	
  xwrite( fmtHndl, (void*) str.c_str(), 1, str.size() );
}

void omeWriteOmeEnd( FormatHandle *fmtHndl )
{
  if (fmtHndl == NULL) return;
  if (fmtHndl->internalParams == NULL) return;
  if (fmtHndl->stream == NULL) return;

  std::string str = "</OME>\n";
  xwrite( fmtHndl, (void*) str.c_str(), 1, str.size() );
}

void omeWriteImageEnd( FormatHandle *fmtHndl )
{
  if (fmtHndl == NULL) return;
  if (fmtHndl->internalParams == NULL) return;
  if (fmtHndl->stream == NULL) return;

  std::string str = "";
  str += "    </Pixels>\n";
  str += "  </Image>\n";

  xwrite( fmtHndl, (void*) str.c_str(), 1, str.size() );
}


//----------------------------------------------------------------------------
// PARAMETERS, INITS
//----------------------------------------------------------------------------

int omeValidateFormatProc (BIM_MAGIC_STREAM *magic, bim::uint length, const bim::Filename fileName) {
  if (length < BIM_OME_MAGIC_SIZE) return -1;
  //if (memcmp( magic, ibwMagicWin, BIM_IBW_MAGIC_SIZE ) == 0) return 0;
  //if (memcmp( magic, ibwMagicMac, BIM_IBW_MAGIC_SIZE ) == 0) return 0;
  return -1;
}

FormatHandle omeAquireFormatProc( void ) {
  FormatHandle fp = initFormatHandle();
  return fp;
}

void omeCloseImageProc( FormatHandle *fmtHndl);
void omeReleaseFormatProc (FormatHandle *fmtHndl) {
  if (fmtHndl == NULL) return;
  omeCloseImageProc ( fmtHndl );  
}


//----------------------------------------------------------------------------
// OPEN/CLOSE
//----------------------------------------------------------------------------
void omeCloseImageProc (FormatHandle *fmtHndl) {
  if (!fmtHndl) return;

  if (fmtHndl->io_mode == IO_WRITE) {
    omeWriteImageEnd ( fmtHndl );
    omeWriteOmeEnd   ( fmtHndl );
  } else {    
    clearMetaTags( &fmtHndl->metaData );
  }  

  xclose ( fmtHndl );

  if (fmtHndl->internalParams) {
    OmeParams *omePar = (OmeParams *) fmtHndl->internalParams;
    delete omePar;
  }
  fmtHndl->internalParams = NULL;
}

bim::uint omeOpenImageProc  (FormatHandle *fmtHndl, ImageIOModes io_mode) {
  if (!fmtHndl) return 1;
  if (io_mode == IO_READ) return 1;

  if (fmtHndl->internalParams != NULL) omeCloseImageProc (fmtHndl);  
  fmtHndl->internalParams = (void *) new bim::OmeParams();
  bim::OmeParams *par = (bim::OmeParams *) fmtHndl->internalParams;

  fmtHndl->io_mode = io_mode;
  xopen(fmtHndl);
  if (!fmtHndl->stream) {
      omeCloseImageProc(fmtHndl);
      return 1;
  };

  if (io_mode == IO_READ) {
    return 1;
    omeGetImageInfo( fmtHndl );
  } else {
    omeWriteOmeHeader( fmtHndl );
  }
  return 0;
}

//----------------------------------------------------------------------------
// INFO for OPEN image
//----------------------------------------------------------------------------

bim::uint omeGetNumPagesProc ( FormatHandle *fmtHndl )
{
  if (fmtHndl == NULL) return 0;
  if (fmtHndl->internalParams == NULL) return 0;
  OmeParams *omePar = (OmeParams *) fmtHndl->internalParams;

  return omePar->i.number_pages;
}


ImageInfo omeGetImageInfoProc ( FormatHandle *fmtHndl, bim::uint page_num )
{
  ImageInfo ii = initImageInfo();

  if (fmtHndl == NULL) return ii;
  OmeParams *omePar = (OmeParams *) fmtHndl->internalParams;

  return omePar->i;
  page_num;
}

//----------------------------------------------------------------------------
// METADATA
//----------------------------------------------------------------------------

bim::uint omeReadMetaDataProc (FormatHandle *fmtHndl, bim::uint page, int group, int tag, int type)
{
  if (fmtHndl == NULL) return 1;
  //return read_ome_metadata (fmtHndl, group, tag, type);
  return 0;
  page;
}

char* omeReadMetaDataAsTextProc ( FormatHandle *fmtHndl )
{
  if (fmtHndl == NULL) return NULL;

  //return read_text_ome_metadata ( fmtHndl );
  return 0;
}

bim::uint omeAddMetaDataProc (FormatHandle *fmtHndl)
{
  fmtHndl=fmtHndl;
  return 1;
}


//----------------------------------------------------------------------------
// READ/WRITE
//----------------------------------------------------------------------------

bim::uint omeReadImageProc  ( FormatHandle *fmtHndl, bim::uint page )
{
  if (fmtHndl == NULL) return 1;
  if (fmtHndl->stream == NULL) return 1;

  fmtHndl->pageNumber = page;
  //return read_ome_image( fmtHndl );
  return 0;
}

bim::uint omeWriteImageProc ( FormatHandle *fmtHndl )
{
  return write_ome_image( fmtHndl );  
}



//****************************************************************************
//
// EXPORTED FUNCTION
//
//****************************************************************************

FormatItem omeItems[1] = {
  {
    "OME",            // short name, no spaces
    "Open Microscopy Environment XML", // Long format name
    "ome",        // pipe "|" separated supported extension list
    0, //canRead;      // 0 - NO, 1 - YES
    1, //canWrite;     // 0 - NO, 1 - YES
    0, //canReadMeta;  // 0 - NO, 1 - YES
    1, //canWriteMeta; // 0 - NO, 1 - YES
    1, //canWriteMultiPage;   // 0 - NO, 1 - YES
    //TDivFormatConstrains constrains ( w, h, pages, minsampl, maxsampl, minbitsampl, maxbitsampl, noLut )
    { 0, 0, 0, 1, 0, 0, 0, 1 } 
  }
};

FormatHeader omeHeader = {

  sizeof(FormatHeader),
  "1.0.0",
  "OME CODEC",
  "OME CODEC",
  
  12,                    // 0 or more, specify number of bytes needed to identify the file
  {1, 1, omeItems},   //dimJpegSupported,
  
  omeValidateFormatProc,
  // begin
  omeAquireFormatProc, //AquireFormatProc
  // end
  omeReleaseFormatProc, //ReleaseFormatProc
  
  // params
  NULL, //AquireIntParamsProc
  NULL, //LoadFormatParamsProc
  NULL, //StoreFormatParamsProc

  // image begin
  omeOpenImageProc, //OpenImageProc
  omeCloseImageProc, //CloseImageProc 

  // info
  omeGetNumPagesProc, //GetNumPagesProc
  omeGetImageInfoProc, //GetImageInfoProc


  // read/write
  omeReadImageProc, //ReadImageProc 
  omeWriteImageProc, //WriteImageProc
  NULL, //ReadImageTileProc
  NULL, //WriteImageTileProc
  NULL, //ReadImageLineProc
  NULL, //WriteImageLineProc
  NULL, //ReadImageThumbProc
  NULL, //WriteImageThumbProc
  NULL, //dimJpegReadImagePreviewProc, //ReadImagePreviewProc
  
  // meta data
  omeReadMetaDataProc, //ReadMetaDataProc
  omeAddMetaDataProc,  //AddMetaDataProc
  omeReadMetaDataAsTextProc, //ReadMetaDataAsTextProc

  NULL,
  NULL,
  NULL,
  ""

};

extern "C" {

FormatHeader* omeGetFormatHeader(void)
{
  return &omeHeader;
}

} // extern C





